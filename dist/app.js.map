{"version":3,"sources":["../app.js"],"names":["express","require","compression","session","bodyParser","logger","chalk","errorHandler","lusca","dotenv","MongoStore","flash","path","mongoose","passport","expressValidator","expressStatusMonitor","sass","multer","upload","dest","join","__dirname","load","homeController","userController","contactController","passportConfig","app","server","createServer","Promise","global","connect","process","env","MONGODB_URI","MONGOLAB_URI","connection","on","err","console","error","log","red","exit","set","OPENSHIFT_NODEJS_IP","PORT","OPENSHIFT_NODEJS_PORT","use","src","json","urlencoded","extended","resave","saveUninitialized","secret","SESSION_SECRET","store","url","autoReconnect","clear_interval","initialize","req","res","next","locals","user","match","returnTo","static","maxAge","isAuthenticated","get","index","getLogin","post","postLogin","logout","getForgot","postForgot","getReset","postReset","getSignup","postSignup","getContact","postContact","getAccount","postUpdateProfile","postUpdatePassword","postDeleteAccount","getOauthUnlink","listen","green","io","module","exports"],"mappings":"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","file":"app.js","sourcesContent":["/**\n * Module dependencies.\n */\nconst express = require('express');\nconst compression = require('compression');\nconst session = require('express-session');\nconst bodyParser = require('body-parser');\nconst logger = require('morgan');\nconst chalk = require('chalk');\nconst errorHandler = require('errorhandler');\nconst lusca = require('lusca');\nconst dotenv = require('dotenv');\nconst MongoStore = require('connect-mongo')(session);\nconst flash = require('express-flash');\nconst path = require('path');\nconst mongoose = require('mongoose');\nconst passport = require('passport');\nconst expressValidator = require('express-validator');\nconst expressStatusMonitor = require('express-status-monitor');\nconst sass = require('node-sass-middleware');\nconst multer = require('multer');\n\nconst upload = multer({ dest: path.join(__dirname, 'uploads') });\n\n/**\n * Load environment variables from .env file, where API keys and passwords are configured.\n */\ndotenv.load({ path: '.env.example' });\n\n/**\n * Controllers (route handlers).\n */\nconst homeController = require('./controllers/home');\nconst userController = require('./controllers/user');\nconst contactController = require('./controllers/contact');\n\n/**\n * API keys and Passport configuration.\n */\nconst passportConfig = require('./config/passport');\n\n/**\n * Create Express server.\n */\nconst app = express();\nvar server = require('http').createServer(app);\n/**\n * Connect to MongoDB.\n */\nmongoose.Promise = global.Promise;\nmongoose.connect(process.env.MONGODB_URI || process.env.MONGOLAB_URI);\nmongoose.connection.on('error', (err) => {\n  console.error(err);\n  console.log('%s MongoDB connection error. Please make sure MongoDB is running.', chalk.red('âœ—'));\n  process.exit();\n});\n\n/**\n * Express configuration.\n */\napp.set('host', process.env.OPENSHIFT_NODEJS_IP || '0.0.0.0');\napp.set('port', process.env.PORT || process.env.OPENSHIFT_NODEJS_PORT || 8080);\napp.set('views', path.join(__dirname, 'views'));\napp.set('view engine', 'pug');\napp.use(expressStatusMonitor());\napp.use(compression());\napp.use(sass({\n  src: path.join(__dirname, 'public'),\n  dest: path.join(__dirname, 'public')\n}));\napp.use(logger('dev'));\napp.use(bodyParser.json());\napp.use(bodyParser.urlencoded({ extended: true }));\napp.use(expressValidator());\napp.use(session({\n  resave: true,\n  saveUninitialized: true,\n  secret: process.env.SESSION_SECRET,\n  store: new MongoStore({\n    url: process.env.MONGODB_URI || process.env.MONGOLAB_URI,\n    autoReconnect: true,\n    clear_interval: 3600\n  })\n}));\napp.use(passport.initialize());\napp.use(passport.session());\napp.use(flash());\napp.use((req, res, next) => {\n  res.locals.user = req.user;\n  next();\n});\napp.use((req, res, next) => {\n  // After successful login, redirect back to the intended page\n  if (!req.user &&\n      req.path !== '/login' &&\n      req.path !== '/signup' &&\n      !req.path.match(/^\\/auth/) &&\n      !req.path.match(/\\./)) {\n    req.session.returnTo = req.path;\n  } else if (req.user &&\n      req.path === '/account') {\n    req.session.returnTo = req.path;\n  }\n  next();\n});\napp.use(express.static(path.join(__dirname, 'public'), { maxAge: 31557600000 }));\n\n//import router\nimport routerLiveStream from './router/livestream.js';\nimport routerLiveChat from './router/livechat.js';\n\napp.use('/livechat',passportConfig.isAuthenticated,routerLiveChat);\napp.use('/livestream',passportConfig.isAuthenticated,routerLiveStream);\n\n/**\n * Primary app routes.\n */\napp.get('/', homeController.index);\napp.get('/login', userController.getLogin);\napp.post('/login', userController.postLogin);\napp.get('/logout', userController.logout);\napp.get('/forgot', userController.getForgot);\napp.post('/forgot', userController.postForgot);\napp.get('/reset/:token', userController.getReset);\napp.post('/reset/:token', userController.postReset);\napp.get('/signup', userController.getSignup);\napp.post('/signup', userController.postSignup);\napp.get('/contact', contactController.getContact);\napp.post('/contact', contactController.postContact);\napp.get('/account', passportConfig.isAuthenticated, userController.getAccount);\napp.post('/account/profile', passportConfig.isAuthenticated, userController.postUpdateProfile);\napp.post('/account/password', passportConfig.isAuthenticated, userController.postUpdatePassword);\napp.post('/account/delete', passportConfig.isAuthenticated, userController.postDeleteAccount);\napp.get('/account/unlink/:provider', passportConfig.isAuthenticated, userController.getOauthUnlink);\n\n/**\n * Error Handler.\n */\napp.use(errorHandler());\n\n/**\n * Start Express server.\n */\nserver.listen(app.get('port'), () => {\n  console.log('%s App is running at http://localhost:%d in %s mode', chalk.green('âœ“'), app.get('port'), app.get('env'));\n  console.log('  Press CTRL-C to stop\\n');\n});\n\n\n/**\n  * event socket\n  */\nimport socketEvent from './socketEvent.js'\nconst io = require('socket.io')(server);\nsocketEvent(io);\n\nmodule.exports = app;\n"]}