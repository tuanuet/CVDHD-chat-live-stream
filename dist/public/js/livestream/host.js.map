{"version":3,"sources":["../../../../public/js/livestream/host.js"],"names":["$","myvideo","document","getElementById","socket","io","TIMEMAIN","TIMEPIPELINE","count","mainRecord","stream","mediaRecorder","MediaRecorder","onstart","e","chunks","ondataavailable","push","data","onstop","blob","Blob","emit","start","setInterval","stop","pipelineRecord","console","log","length","setTimeout","loadCam","src","window","URL","createObjectURL","loadCamErr","err","roomId","DATA_RENDER","ack","navigator","getUserMedia","webkirGetUserMedia","mozGetUserMedia","msgGetUserMedia","video","audio"],"mappings":"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","file":"host.js","sourcesContent":["\n\n$(function() {\n    var myvideo = document.getElementById('video');\n    var socket = io('/livestreamg');\n\n    var TIMEMAIN = 5000;\n    var TIMEPIPELINE = 0.5 * TIMEMAIN;\n    var count = 0;\n\n\n    function mainRecord(stream) {\n        var mediaRecorder = new MediaRecorder(stream);\n        mediaRecorder.onstart = function(e) {\n            this.chunks = [];\n        };\n        mediaRecorder.ondataavailable = function(e) {\n            this.chunks.push(e.data);\n        };\n        mediaRecorder.onstop = function(e) {\n            var blob = new Blob(this.chunks, { 'type' : 'video/webm' });\n            socket.emit('streaming', blob);\n            mediaRecorder.start();\n        };\n\n        mediaRecorder.start();\n        // Stop recording after 3 seconds and broadcast it to server\n        setInterval(function() {\n            mediaRecorder.stop()\n        }, TIMEMAIN);\n    }\n\n\n    function pipelineRecord(stream) {\n        var mediaRecorder = new MediaRecorder(stream);\n        mediaRecorder.onstart = function(e) {\n            console.log(this.chunks ? this.chunks.length : 0);\n            this.chunks = [];\n        };\n        mediaRecorder.ondataavailable = function(e) {\n            this.chunks.push(e.data);\n        };\n        mediaRecorder.onstop = function(e) {\n            var blob = new Blob(this.chunks, { 'type' : 'video/webm' });\n            socket.emit('streaming', blob);\n            mediaRecorder.start();\n        };\n\n\n        // Stop recording after 3 seconds and broadcast it to server\n        setTimeout(function () {\n            mediaRecorder.start();\n            setInterval(function() {\n                mediaRecorder.stop()\n                setTimeout(function () {\n                    console.log('do\\'nt do nothing')\n                },TIMEPIPELINE)\n            }, TIMEPIPELINE);\n        },TIMEMAIN - 0.5 * TIMEPIPELINE)\n\n    }\n    function loadCam(stream) {\n        console.log('Load camera success');\n        let src = window.URL.createObjectURL(stream);\n        myvideo.src = src;\n\n        mainRecord(stream)\n        // pipelineRecord(stream)\n\n\n    }\n    function loadCamErr(err) {\n        console.log('Load camera failure: ',err);\n    }\n\n    socket.emit('join',{\n    roomId : window.DATA_RENDER.roomId,\n    },function (ack) {\n    console.log('JOIN: Server on recived message: ',ack)\n    })\n\n    navigator.getUserMedia = (navigator.getUserMedia || navigator.webkirGetUserMedia||\n            navigator.mozGetUserMedia || navigator.msgGetUserMedia);\n    if(navigator.getUserMedia){\n    navigator.getUserMedia({video : true,audio : true},loadCam,loadCamErr)\n    }\n\n});\n"]}