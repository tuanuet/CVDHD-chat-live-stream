{"version":3,"sources":["../../../../public/js/livestream/host.js"],"names":["$","myvideo","document","getElementById","socket","io","transports","TIMEMAIN","TIMEPIPELINE","count","mainRecord","stream","mediaRecorder","MediaRecorder","onstart","e","chunks","ondataavailable","push","data","onstop","blob","Blob","type","emit","start","setInterval","stop","TYPE","pipelineRecord","setTimeout","console","log","loadCam","src","window","URL","createObjectURL","loadCamErr","err","roomId","DATA_RENDER","ack","navigator","getUserMedia","webkirGetUserMedia","mozGetUserMedia","msgGetUserMedia","video","audio"],"mappings":"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","file":"host.js","sourcesContent":["$(() => {\n  const myvideo = document.getElementById('video');\n  const socket = io('/livestream', { transports: ['websocket'] });\n\n  const TIMEMAIN = 2000;\n  const TIMEPIPELINE = 0.5 * TIMEMAIN;\n  const count = 0;\n\n  function mainRecord(stream) {\n    const mediaRecorder = new MediaRecorder(stream);\n\n    mediaRecorder.onstart = function (e) {\n      this.chunks = [];\n    };\n    mediaRecorder.ondataavailable = function (e) {\n      this.chunks.push(e.data);\n    };\n    mediaRecorder.onstop = function (e) {\n      const blob = new Blob(this.chunks, { type: 'video/webm' });\n      socket.emit('streaming', blob);\n      mediaRecorder.start();\n    };\n\n    mediaRecorder.start();\n    // Stop recording after 3 seconds and broadcast it to server\n    setInterval(() => {\n      mediaRecorder.stop();\n    }, TIMEMAIN);\n  }\n\n  const TYPE = 'video/webm; codecs=\"vorbis,vp8\"';\n  function pipelineRecord(stream) {\n    const mediaRecorder = new MediaRecorder(stream);\n    mediaRecorder.onstart = function (e) {\n      this.chunks = [];\n    };\n    mediaRecorder.ondataavailable = function (e) {\n      this.chunks.push(e.data);\n    };\n    mediaRecorder.onstop = function (e) {\n      const blob = new Blob(this.chunks, { type: TYPE });\n      socket.emit('streaming', blob);\n      mediaRecorder.start();\n    };\n\n\n    // Stop recording after 3 seconds and broadcast it to server\n    setTimeout(() => {\n      mediaRecorder.start();\n      setInterval(() => {\n        mediaRecorder.stop();\n        setTimeout(() => {\n          console.log('do\\'nt do nothing');\n        }, TIMEPIPELINE);\n      }, TIMEPIPELINE);\n    }, TIMEMAIN - 0.5 * TIMEPIPELINE);\n  }\n  function loadCam(stream) {\n    console.log('Load camera success');\n    const src = window.URL.createObjectURL(stream);\n    myvideo.src = src;\n\n    mainRecord(stream);\n    // pipelineRecord(stream)\n  }\n  function loadCamErr(err) {\n    console.log('Load camera failure: ', err);\n  }\n  socket.emit('join', {\n    roomId: window.DATA_RENDER.roomId,\n  }, (ack) => {\n    console.log('JOIN: Server on recived message: ', ack);\n  });\n\n  navigator.getUserMedia = (navigator.getUserMedia || navigator.webkirGetUserMedia ||\n            navigator.mozGetUserMedia || navigator.msgGetUserMedia);\n  if (navigator.getUserMedia) {\n    navigator.getUserMedia({ video: true, audio: true }, loadCam, loadCamErr);\n  }\n});\n"]}