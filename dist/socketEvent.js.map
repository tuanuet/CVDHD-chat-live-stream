{"version":3,"sources":["../socketEvent.js"],"names":["ss","require","rooms","fs","module","exports","io","of","on","socket","console","log","id","data","cb","join","roomId","err","existFolder","existsSync","__dirname","mkdirSync","array","count","buffer","socketId","url","writeFileMp4","push","emitToOther","length","readFileSync","broadcast","to","emit","path","Promise","resolve","reject","open","fd","write","close"],"mappings":"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","file":"socketEvent.js","sourcesContent":["var ss = require('socket.io-stream');\nlet rooms = {};\nconst fs = require('fs');\n\nmodule.exports = (io) => {\n  io.of('/livestream').on('connection',(socket) => {\n    console.log('Event connection: ',socket.id);\n\n    socket.on('join',(data,cb) => {\n      socket.join(data.roomId,(err) => {\n        if(err) return cb(false);\n        let existFolder = fs.existsSync(`${__dirname}/uploads/${data.roomId}/`);\n        if(!existFolder) {\n          fs.mkdirSync(`${__dirname}/uploads/${data.roomId}/`)\n        }\n        socket.roomId = data.roomId;\n        rooms[data.roomId] = rooms[data.roomId] || {};\n        rooms[data.roomId].array = rooms[data.roomId].array || [];\n        rooms[data.roomId].count = rooms[data.roomId].count || 0;\n        return cb(true);\n      })\n\n    })\n    socket.on('streaming',async function(buffer) {\n      try{\n        // console.log(`Streaming_${rooms[socket.roomId].count}: `);\n        // console.log(buffer);\n        rooms[socket.roomId].socketId = socket.id;\n\n        let url = `${__dirname}/uploads/${socket.roomId}/blob-${rooms[socket.roomId].count}.mp4`;\n        await writeFileMp4(url,buffer);\n        rooms[socket.roomId].count++;\n\n        if(rooms[socket.roomId].array)\n          rooms[socket.roomId].array.push(buffer);\n\n        emitToOther(socket);\n\n      } catch (err) {\n        // console.log(err.message);\n      }\n    });\n\n    let emitToOther = (socket) => {\n      if(rooms[socket.roomId].array.length >= 3){\n        let url = `${__dirname}/uploads/${socket.roomId}/blob-${rooms[socket.roomId].count - 2}.mp4`;\n        let data = fs.readFileSync(url);\n        socket.broadcast.to(socket.roomId).emit('server-broadcast-livestream',data)\n      }\n    }\n\n    let writeFileMp4 = (path,buffer) => new Promise((resolve,reject) => {\n      // open the file in writing mode, adding a callback function where we do the actual writing\n      fs.open(path, 'w', function(err, fd) {\n          if (err) {\n              reject(err)\n          }\n          // write the contents of the buffer, from position 0 to the end, to the file descriptor returned in opening our file\n          fs.write(fd, buffer, 0, buffer.length, null, function(err) {\n              if (err) throw 'error writing file: ' + err;\n              fs.close(fd, function() {\n                  console.log('wrote the file successfully');\n                  resolve(true);\n              });\n          });\n      });\n    })\n\n    // setInterval(() => {\n    //   try {\n    //     Object.keys(rooms).map(roomId => {\n    //       console.log('RoomId:',roomId);\n    //       let room = rooms[roomId];\n    //       if(room && room.array.length >= 3){\n    //         let socketInRooms = io.of('/livestream').adapter.rooms[roomId];\n    //         // console.log('socket in room:',socketInRooms);\n    //\n    //         let path = `${__dirname}/uploads/${roomId}/blob-${room.count - 2}.mp4`;\n    //         let data = fs.readFileSync(path);\n    //         if(room.socketId){\n    //             console.log(room.socketId);\n    //             let host = io.nsps['/livestream'].connected[room.socketId];\n    //             host.broadcast.to(room.roomId).emit('server-broadcast-livestream',data)\n    //         }\n    //       }\n    //     })\n    //   } catch (err) {\n    //     console.log(err);\n    //   }},2000)\n  });\n}\n"]}