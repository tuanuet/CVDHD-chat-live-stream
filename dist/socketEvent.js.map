{"version":3,"sources":["../socketEvent.js"],"names":["ss","require","rooms","fs","module","exports","io","of","on","socket","console","log","id","data","cb","join","roomId","err","pathDirectory","__dirname","existFolder","existsSync","mkdirSync","countSegment","readdirSync","length","buffers","blob","Error","url","push","writeFileMp4","message","path","buffer","Promise","resolve","reject","open","fd","write","close","idPeer","broadcast","to","emit"],"mappings":"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","file":"socketEvent.js","sourcesContent":["var ss = require('socket.io-stream');\nlet rooms = {};\nconst fs = require('fs');\nmodule.exports = (io) => {\n  io.of('/livestream').on('connection',(socket) => {\n    console.log('Event connection: ',socket.id);\n\n    socket.on('join',(data,cb) => {\n      socket.join(data.roomId,(err) => {\n        if(err) return cb(false);\n        try{\n            let pathDirectory = `${__dirname}/uploads/${data.roomId}/`\n            let existFolder = fs.existsSync(pathDirectory);\n            if(!existFolder) {\n                fs.mkdirSync(pathDirectory);\n            }\n            let countSegment = fs.readdirSync(pathDirectory).length;\n            socket.buffers = [];\n            socket.roomId = data.roomId;\n            socket.countSegment = countSegment;\n            return cb(true);\n        } catch (err) {\n            return cb(false);\n        }\n\n      })\n\n    })\n    socket.on('streaming', async (blob) => {\n      try{\n        if(!socket.roomId && !socket.countSegment) throw new Error('socket not join room')\n        let url = `${__dirname}/uploads/${socket.roomId}/blob-${++socket.countSegment}.webm`;\n        socket.buffers.push(blob);\n        await writeFileMp4(url,blob);\n\n      } catch ( err ) {\n        console.log(err.message);\n      }\n    });\n\n    let writeFileMp4 = (path,buffer) => new Promise((resolve,reject) => {\n      // open the file in writing mode, adding a callback function where we do the actual writing\n      fs.open(path, 'w', function(err, fd) {\n          if (err) reject(err)\n          // write the contents of the buffer, from position 0 to the end, to the file descriptor returned in opening our file\n          fs.write(fd, buffer, 0, buffer.length, null, function(err) {\n              if (err) throw 'error writing file: ' + err;\n              fs.close(fd, function() {\n                  resolve(true);\n              });\n          });\n      });\n    });\n\n    io.of('/livechat').on('connection',(socket) => {\n      socket.on('join',(data,cb) => {\n        socket.idPeer = data.idPeer;\n        socket.join(data.roomId,(err) => {\n          if(err) return cb(false);\n          socket.roomId = data.roomId;\n          socket.broadcast.to(socket.roomId).emit('new-member-join-room',data.idPeer)\n          return cb(true);\n        })\n      })\n      socket.on('disconnect',() => {\n        socket.broadcast.to(socket.roomId).emit('member-quit-room',socket.idPeer)\n      })\n    });\n  })\n};\n"]}