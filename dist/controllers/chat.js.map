{"version":3,"sources":["../../controllers/chat.js"],"names":["TypeRoom","getLiveChat","req","res","render","getCreateLiveChat","postCreateLiveChat","newRoom","name","body","roomName","description","roomDescription","hostId","user","id","type","LIVECHAT","save","err","room","console","log","message","redirect","getLiveChatOnline","roomId","params","compareHost","isHost","getLiveStream","io","rooms","of","adapter","keyRooms","Object","keys","promises","filter","key","startsWith","map","findRoomAndUser","email","value","Promise","all","data","getCreateLiveStream","postCreateLiveStream","LIVESTREAM","getLiveStreamOnline"],"mappings":"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","file":"chat.js","sourcesContent":["import Room from '../models/Room';\nimport * as TypeRoom from '../constants/TypeRoom';\nimport _ from 'lodash';\nexport const getLiveChat = (req,res) => {\n  res.render('livechat');\n}\n\n\nexport const getCreateLiveChat = (req,res) => {\n  res.render('livechat/create')\n}\n\nexport const postCreateLiveChat = (req,res) => {\n  let newRoom = new Room({\n    name : req.body.roomName,\n    description : req.body.roomDescription,\n    hostId : req.user.id,\n    type : TypeRoom.LIVECHAT,\n  })\n  newRoom.save((err,room) => {\n    if(err) {\n      console.log(err.message)\n      return;\n    }\n\n    res.redirect(`/livechat/room/${room.id}`);\n  })\n\n}\n\n\n/**\n  * Dungf chung cho 2 route người xem va nguoi host\n  */\nexport const getLiveChatOnline = async (req,res) => {\n  let roomId = req.params.roomId;\n  let user = req.user;\n\n  //todo: checkdb that user is host ?\n  // if host => render livechat/host\n  // else render livechat/other\n  let isHost = await Room.compareHost(user.id,roomId,TypeRoom.LIVECHAT);\n\n  if(isHost){\n      return res.render('livechat/host');\n  }\n  return res.render('livechat/other');\n};\n\n//===============================================\nexport const getLiveStream = async (req,res) => {\n  let io = req.io;\n  let rooms = io.of('/livestream').adapter.rooms;\n  let keyRooms = Object.keys(rooms);\n  let promises = _(keyRooms)\n      .filter(key => !_(key).startsWith('/livestream'))\n      .map(async roomId => {\n          let room = await Room.findRoomAndUser(roomId);\n          return {\n              roomId,\n              email: room.hostId.email,\n              roomName: room.name,\n              description: room.description\n          }\n      })\n      .value();\n  let data = await Promise.all(promises);\n\n  console.log('room ID:',data);\n  res.render('livestream',{data});\n}\n\n\nexport const getCreateLiveStream = (req,res) => {\n  res.render('livestream/create')\n}\n\n\nexport const postCreateLiveStream = (req,res) => {\n  let newRoom = new Room({\n    name : req.body.roomName,\n    description : req.body.roomDescription,\n    hostId : req.user.id,\n    type : TypeRoom.LIVESTREAM,\n  });\n  newRoom.save((err,room) => {\n    if(err) {\n      console.log(err.message)\n      return;\n    }\n\n    res.redirect(`/livestream/room/${room.id}`);\n  })\n\n}\n\n/**\n  * Dungf chung cho 2 route người xem va nguoi host\n  */\nexport const getLiveStreamOnline = async (req,res) => {\n  let roomId = req.params.roomId;\n  let user = req.user;\n  console.log(user);\n  //todo: checkdb that user is host ?\n  // if host => render livechat/host\n  // else render livechat/other\n  let isHost = await Room.compareHost(user.id,roomId,TypeRoom.LIVESTREAM);\n\n  if(isHost){\n      return res.render('livestream/host',{roomId,user});\n  }\n  return res.render('livestream/other',{roomId,user});;\n};\n"]}